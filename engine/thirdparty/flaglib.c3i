/************************************ LICENSE *******************************************
# hmflathead GPL Source Code
# Copyright (C) 2025 Hilario Martins.
# 
# This file is part of the hmflathead GPL Source Code ("hmflathead Source Code")
# 
# hmflathead Source Code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# hmflathead Source Code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with hmflathead Source Code.  If not, see <http://www.gnu.org/licenses/>.
# 
# In addition, the hmflathead Source Code is also subject to certain additional terms. 
# You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License 
# which accompanied the hmflathead Source Code.  If not, please request a copy in writing from me at the address below.
# 
# If you have questions concerning this license or the applicable additional terms, you may contact in writing 
# Hilario Martins, Rua de Sanguinhedo 1010 4850-545 Vieira Do Minho Portugal.
# 
*********************************************************************************************************************************************/

module thirdparty::tsoding::fg @if($feature(TSODING_FLAG));

import std::io;
import libc;

// flag.h -- v1.2.0 -- command-line flag parsing
//
//   Inspired by Go's flag module: https://pkg.go.dev/flag
//
// Macros API:
// - FLAG_LIST_INIT_CAP - initial capacity of the Flag_List Dynamic Array.
// - FLAGS_CAP - how many flags you can define.
// - FLAG_PUSH_DASH_DASH_BACK - make flag_parse() retain "--" in the rest args
//   (available via flag_rest_argc() and flag_rest_argv()). Useful when you need
//   to know whether flag_parse() has stopped due to encountering "--" or due to
//   encountering a non-flag. Ideally this should've been a default behavior,
//   but it breaks backward compatibility. Hence it's a feature macro.
//   TODO: make FLAG_PUSH_DASH_DASH_BACK a default behavior on a major version upgrade.

// TODO: add support for -flag=x syntax
// TODO: *_var function variants
// void flag_bool_var(bool *var, ZString  name, bool def, ZString  desc);
// void flag_bool_uint64(ulong *var, ZString  name, bool def, ZString  desc);
// etc.
// WARNING! *_var functions may break the flag_name() functionality

const FLAG_LIST_INIT_CAP = 8;

struct Flag_List 
{
    ZString*items;
    usz count;
    usz capacity;
}

enum Flag_Type : inline int
{
    BOOL,
    UINT64,
    SIZE,
    STR,
    LIST,
}

$assert(Flag_Type.values.len == 5);

union Flag_Value 
{
    ZString as_str;
    ulong as_uint64;
    bool as_bool;
    usz as_size;
    Flag_List as_list;
}

enum Flag_Error : inline int
{
    NO_ERROR,
    UNKNOWN,
    NO_VALUE,
    INVALID_NUMBER,
    INTEGER_OVERFLOW,
    INVALID_SIZE_SUFFIX,
}

struct Flag 
{
    Flag_Type type;
    ZString name;
    ZString desc;
    Flag_Value val;
    Flag_Value def;
}

const FLAGS_CAP = 256;

struct Flag_Context 
{
    Flag[FLAGS_CAP] flags;
    usz flags_count;

    Flag_Error flag_error;
    ZString flag_error_name;

    ZString program_name;

    int rest_argc;
    ZString* rest_argv;
}

extern fn ZString flag_name(void* val) @extern("flag_name");
extern fn bool* flag_bool(ZString  name, bool def, ZString  desc) @extern("flag_bool");
extern fn ulong* flag_uint64(ZString  name, ulong def, ZString  desc) @extern("flag_uint64");
extern fn usz* flag_size(ZString  name, ulong def, ZString  desc) @extern("flag_size");
extern fn ZString* flag_str(ZString  name, ZString  def, ZString  desc) @extern("flag_str");
extern fn Flag_List* flag_list(ZString  name, ZString  desc) @extern("flag_list");
extern fn bool flag_parse(int argc, ZString* argv) @extern("flag_parse");
extern fn int flag_rest_argc() @extern("flag_rest_argc");
extern fn ZString* flag_rest_argv() @extern("flag_rest_argv");
extern fn void flag_print_error(CFile *stream) @extern("flag_print_error");
extern fn void flag_print_options(CFile *stream) @extern("flag_print_options");
extern fn ZString flag_program_name() @extern("flag_program_name");


/*
   Revision history:

     1.2.0 (2025-05-31) Introduce FLAG_PUSH_DASH_DASH_BACK (by @nullnominal)
     1.1.0 (2025-05-09) Introduce flag list
     1.0.0 (2025-03-03) Initial release
                        Save program_name in the context

*/

// Copyright 2021 Alexey Kutepov <reximkut@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.