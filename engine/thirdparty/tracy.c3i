/************************************ LICENSE *******************************************
# hmflathead GPL Source Code
# Copyright (C) 2025 Hilario Martins.
# 
# This file is part of the hmflathead GPL Source Code ("hmflathead Source Code")
# 
# hmflathead Source Code is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# hmflathead Source Code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with hmflathead Source Code.  If not, see <http://www.gnu.org/licenses/>.
# 
# In addition, the hmflathead Source Code is also subject to certain additional terms. 
# You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License 
# which accompanied the hmflathead Source Code.  If not, please request a copy in writing from me at the address below.
# 
# If you have questions concerning this license or the applicable additional terms, you may contact in writing 
# Hilario Martins, Rua de Sanguinhedo 1010 4850-545 Vieira Do Minho Portugal.
# 
*********************************************************************************************************************************************/

module thirdparty::tracy @if($feature(TRACY_ENABLE));

import std::io;
import std::atomic::types;

enum PlotFormat
{
    NUMBER,
    MEMORY,
    PERCENTAGE,
    WATT
}

fn void set_thread_name( ZString name ) @extern("___tracy_set_thread_name");

alias UInt8_t @private = char;

struct SourceLocationData
{
    ZString name;
    ZString function;
    ZString file;
    uint line;
    uint color;
}

struct ZoneContext
{
    uint id;
    int active;
}

struct GPU_TimeData
{
    long gpuTime;
    ushort queryId;
    UInt8_t context;
}

struct GPU_ZoneBeginData {
    ulong srcloc;
    ushort queryId;
    UInt8_t context;
}

struct GPU_Zone_begin_callstack_data {
    ulong srcloc;
    int depth;
    ushort queryId;
    UInt8_t context;
}

struct GPU_zone_end_data {
    ushort queryId;
    UInt8_t context;
}

struct GPU_new_context_data {
    long gpuTime;
    float period;
    UInt8_t context;
    UInt8_t flags;
    UInt8_t type;
}

struct GPU_context_name_data {
    UInt8_t context;
    ZString name;
    ushort len;
}

struct GPU_calibration_data {
    long gpuTime;
    long cpuDelta;
    UInt8_t context;
}

struct GPU_time_sync_data {
    long gpuTime;
    UInt8_t context;
}

struct Lockable_context_data {
    uint m_id;
    Atomic{uint} m_lockCount @if($feature(TRACY_ON_DEMAND));
    Atomic{bool} m_active @if($feature(TRACY_ON_DEMAND));
}

// Some containers don't support storing const types.
// This struct, as visible to user, is immutable, so treat it as if const was declared here.
alias LockCtxPtr = Lockable_context_data*;

// region ============== PROFILER MANAGMENT ===============================
fn void startup_profiler() @extern("___tracy_startup_profiler")     @if($feature(TRACY_MANUAL_LIFETIME));  
fn void shutdown_profiler() @extern("___tracy_shutdown_profiler")   @if($feature(TRACY_MANUAL_LIFETIME));
fn int profiler_started() @extern("___tracy_profiler_started")      @if($feature(TRACY_MANUAL_LIFETIME));
alias isStarted  @if($feature(TRACY_MANUAL_LIFETIME)) = profiler_started;                          
int isStarted @if(!$feature(TRACY_MANUAL_LIFETIME)) = 1;
// end_region ============== PROFILER MANAGMENT END ===============================

fn ulong alloc_srcloc( uint line, ZString source, usz sourceSz, ZString function, usz functionSz, uint color ) @extern("___tracy_alloc_srcloc");
fn ulong alloc_srcloc_name( uint line, ZString source, usz sourceSz, ZString function, usz functionSz, ZString name, usz nameSz, uint color ) @extern("___tracy_alloc_srcloc_name");

module thirdparty::tracy::zn @if($feature(TRACY_ENABLE));

fn ZoneContext begin( SourceLocationData* srcloc, int active ) @extern("___tracy_emit_zone_begin");
fn ZoneContext begin_callstack( SourceLocationData* srcloc, int depth, int active ) @extern("___tracy_emit_zone_begin_callstack");
fn ZoneContext begin_alloc( ulong srcloc, int active ) @extern("___tracy_emit_zone_begin_alloc");
fn ZoneContext begin_alloc_callstack( ulong srcloc, int depth, int active ) @extern("___tracy_emit_zone_begin_alloc_callstack");
fn void ZoneContext.end( ZoneContext ctx ) @extern("___tracy_emit_zone_end");
fn void ZoneContext.text( ZoneContext ctx, ZString txt, usz size ) @extern("___tracy_emit_zone_text");
fn void ZoneContext.name( ZoneContext ctx, ZString txt, usz size ) @extern("___tracy_emit_zone_name");
fn void ZoneContext.color( ZoneContext ctx, uint color ) @extern("___tracy_emit_zone_color");
fn void ZoneContext.value( ZoneContext ctx, ulong value ) @extern("___tracy_emit_zone_value");

module thirdparty::tracy::gpuzn @if($feature(TRACY_ENABLE));

fn void begin( GPU_ZoneBeginData ) @extern("___tracy_emit_GPU_zone_begin");
fn void begin_callstack( GPU_Zone_begin_callstack_data ) @extern("___tracy_emit_GPU_zone_begin_callstack");
fn void begin_alloc( GPU_ZoneBeginData ) @extern("___tracy_emit_GPU_zone_begin_alloc");
fn void begin_alloc_callstack( GPU_Zone_begin_callstack_data ) @extern("___tracy_emit_GPU_zone_begin_alloc_callstack");
fn void end( GPU_zone_end_data data ) @extern("___tracy_emit_GPU_zone_end");

module thirdparty::tracy::gpu @if($feature(TRACY_ENABLE));

fn void time( GPU_TimeData ) @extern("___tracy_emit_GPU_time");
fn void new_context( GPU_new_context_data ) @extern("___tracy_emit_GPU_new_context");
fn void context_name( GPU_context_name_data ) @extern("___tracy_emit_GPU_context_name");
fn void calibration( GPU_calibration_data ) @extern("___tracy_emit_GPU_calibration");
fn void time_sync( GPU_time_sync_data ) @extern("___tracy_emit_GPU_time_sync");

module thirdparty::tracy::gpuzn @if($feature(TRACY_ENABLE)); // (B)

fn void begin_serial( GPU_ZoneBeginData ) @extern("___tracy_emit_gpu_zone_begin_serial");
fn void begin_callstack_serial( GPU_Zone_begin_callstack_data ) @extern("___tracy_emit_gpu_zone_begin_callstack_serial");
fn void begin_alloc_serial( GPU_ZoneBeginData ) @extern("___tracy_emit_gpu_zone_begin_alloc_serial");
fn void begin_alloc_callstack_serial( GPU_Zone_begin_callstack_data ) @extern("___tracy_emit_gpu_zone_begin_alloc_callstack_serial");
fn void end_serial( GPU_zone_end_data data ) @extern("___tracy_emit_gpu_zone_end_serial");

module thirdparty::tracy::gpu @if($feature(TRACY_ENABLE)); // (B)

fn void time_serial( GPU_TimeData ) @extern("___tracy_emit_gpu_time_serial");
fn void new_context_serial( GPU_new_context_data ) @extern("___tracy_emit_gpu_new_context_serial");
fn void context_name_serial( GPU_context_name_data ) @extern("___tracy_emit_gpu_context_name_serial");
fn void calibration_serial( GPU_calibration_data ) @extern("___tracy_emit_gpu_calibration_serial");
fn void time_sync_serial( GPU_time_sync_data ) @extern("___tracy_emit_gpu_time_sync_serial");

module thirdparty::tracy @if($feature(TRACY_ENABLE)); // (B)
import std::io;

fn int local_connected() @local @extern("___tracy_connected");
macro bool connected() => (local_connected() == 0) ? false : true;


//=============================================================================================
//  NOTE(HM) 
//  C3 zone macros, if not passed external zone context, work like the ZoneScoped macro 
//      in the C++ API, this means the zone context ends at macro scope end.
//  Also because I was unnable to create a unique source_location name for each call, like the
//      C API does, this means that each macro, will create a variable with the same name, 
//      in principle this is not a problem, because they are contained within their own scope 
//      but I have not tested this deeply...so things may break...
//=============================================================================================

// region TRACY_HAS_CALLSTACK && TRACY_CALLSTACK
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $active : "Set to 0 to disable the zone"
*>
macro @zone($active; @body) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    $if $active:
        var $Type = $typeof($active);
        $Type activate = local_connected();
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, 0 };
        var ctx = zn::begin_callstack( &source_location, TRACY_CALLSTACK, $active );
        defer ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneN($name, $active; @body) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    $if $active:
        var $Type = $typeof($active);
        $Type activate = local_connected();
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, 0 };
        var ctx = zn::begin_callstack( &source_location, TRACY_CALLSTACK, $active );
        defer ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $color : "color to paint zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneC($color, $active; @body) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    $if $active:
        var $Type = $typeof($active);
        $Type activate = local_connected();
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin_callstack( &source_location, TRACY_CALLSTACK, $active );
        defer ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $color : "color to paint zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNC($name, $color, $active; @body) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    $if $active:
        var $Type = $typeof($active);
        $Type activate = local_connected();
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin_callstack( &source_location, TRACY_CALLSTACK, $active );
        defer ctx.end();
    $endif
    @body();
}
// end_region


// region not TRACY_HAS_CALLSTACK && not TRACY_CALLSTACK

<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $active : "Set to 0 to disable the zone"
*>
macro @zone( $active, ZoneContext* ctx_out = null; @body()) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, 0 };
        var ctx = zn::begin( &source_location, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}

<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>  
macro @zoneN($name, $active, ZoneContext* ctx_out = null; @body()) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, 0 };
        var ctx = zn::begin( &source_location, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}

<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $color : "color to paint zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneC($color, $active, ZoneContext* ctx_out = null; @body()) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin( &source_location, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}

<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $color : "color to paint zone frame in the viewer"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNC($name, $color, $active, ZoneContext* ctx_out = null; @body()) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin( &source_location, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}
// end_region

// region TRACY_HAS_CALLSTACK
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneS($depth, $active, ZoneContext* ctx_out = null; @body()) @if($feature(TRACY_HAS_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin_callstack( &source_location, $depth, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNS($name, $depth, $active, ZoneContext* ctx_out = null; @body()) @if($feature(TRACY_HAS_CALLSTACK))
{
    $if $active:
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, 0 };
        var ctx = zn::begin_callstack( &source_location, $depth, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $color : "color to paint zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneCS($color, $depth, $active, ZoneContext* ctx_out = null; @body()) @if($feature(TRACY_HAS_CALLSTACK)) 
{
    $if $active:
        var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin_callstack( &source_location, $depth, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $color : "color to paint zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNCS($name, $color, $depth, $active, ZoneContext* ctx_out = null; @body()) @if($feature(TRACY_HAS_CALLSTACK))
{    
    $if $active:
        var source_location = (SourceLocationData) { $name, $$FUNC,  $$FILE, (uint)$$LINE, $color };
        var ctx = zn::begin_callstack( &source_location, $depth, $active );
        if(ctx_out) ctx_out = &ctx;
        defer if(!ctx_out) ctx.end();
    $endif
    @body();
}
// end_region

// region not TRACY_HAS_CALLSTACK
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneS( ctx, $depth, $active ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    zone( ctx, $active );
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNS( ctx, $name, $depth, $active ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    zoneN( ctx, $name, active );
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $color : "color to paint zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneCS( ctx, $color, $depth, $active ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    zoneC( ctx, $color, $active );
}
<*
    Similar to ZoneScoped, context ends at macro scope end.
    
    @param $name : "name to show on zone frame in the viewer"
    @param $color : "color to paint zone frame in the viewer"
    @param $depth : "the depth of call stack to be captured (The greater the depth, the longer it will take to perform capture)"
    @param $active : "Set to 0 to disable the zone"
*>
macro @zoneNCS( ctx, $name, $color, $depth, $active ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    zoneNC( ctx, $name, $color, $active );
}
// end_region

module thirdparty::tracy::mem @if($feature(TRACY_ENABLE));

fn void alloc( void* ptr, usz size, int secure ) @extern("___tracy_emit_memory_alloc");
fn void alloc_callstack( void* ptr, usz size, int depth, int secure ) @extern("___tracy_emit_memory_alloc_callstack");
fn void free( void* ptr, int secure ) @extern("___tracy_emit_memory_free");
fn void free_callstack( void* ptr, int depth, int secure ) @extern("___tracy_emit_memory_free_callstack");
fn void alloc_named( void* ptr, usz size, int secure, ZString name ) @extern("___tracy_emit_memory_alloc_named");
fn void alloc_callstack_named( void* ptr, usz size, int depth, int secure, ZString name ) @extern("___tracy_emit_memory_alloc_callstack_named");
fn void free_named( void* ptr, int secure, ZString name ) @extern("___tracy_emit_memory_free_named");
fn void free_callstack_named( void* ptr, int depth, int secure, ZString name ) @extern("___tracy_emit_memory_free_callstack_named");

// region TRACY_HAS_CALLSTACK && TRACY_CALLSTACK
macro @alloc( #ptr, $size ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    alloc_callstack( #ptr, $size, TRACY_CALLSTACK, 0 );
}
macro @free( #ptr ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    free_callstack( #ptr, TRACY_CALLSTACK, 0 );
}
macro @secureAlloc( #ptr, $size ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))  
{
    alloc_callstack( #ptr, $size, TRACY_CALLSTACK, 1 );
}
macro @secureFree( #ptr ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK)) 
{
    free_callstack( #ptr, TRACY_CALLSTACK, 1 );
}
macro @allocN( #ptr, $size, $name ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
     alloc_callstack_named( #ptr, $size, TRACY_CALLSTACK, 0, $name );
}
macro @freeN( #ptr, $name ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    free_callstack_named( #ptr, TRACY_CALLSTACK, 0, $name );
}
macro @secureAllocN( #ptr, $size, $name ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    alloc_callstack_named( #ptr, $size, TRACY_CALLSTACK, 1, $name );
}
macro @secureFreeN( #ptr, $name ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    free_callstack_named( #ptr, TRACY_CALLSTACK, 1, $name );
}
// end_region

// region not TRACY_HAS_CALLSTACK && not TRACY_CALLSTACK
macro @alloc( #ptr, $size ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    alloc( #ptr, $size, 0 );
}
macro @free( #ptr ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    free( #ptr, 0 );
}
macro @secureAlloc( #ptr, $size ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    alloc( #ptr, $size, 1 );
}
macro @secureFree( #ptr ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    free( #ptr, 1 );
}
macro @allocN( #ptr, $size, $name ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    alloc_named( #ptr, $size, 0, $name );
}
macro @freeN( #ptr, $name ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    free_named( #ptr, 0, $name );
}
macro @secureAllocN( #ptr, $size, $name ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    alloc_named( #ptr, $size, 1, $name );
}
macro @secureFreeN( #ptr, $name ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    free_named( #ptr, 1, $name );
}
// end_region

// region TRACY_HAS_CALLSTACK
macro allocS( ptr, size, depth ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    alloc_callstack( ptr, size, depth, 0 );
}
macro freeS( ptr, depth ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    free_callstack( ptr, depth, 0 );
}
macro secureAllocS( ptr, size, depth ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    alloc_callstack( ptr, size, depth, 1 );
}
macro secureFreeS( ptr, depth ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    free_callstack( ptr, depth, 1 );
}
macro allocNS( ptr, size, depth, name ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    alloc_callstack_named( ptr, size, depth, 0, name );
}
macro freeNS( ptr, depth, name ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    free_callstack_named( ptr, depth, 0, name );
}
macro secureAllocNS( ptr, size, depth, name ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    alloc_callstack_named( ptr, size, depth, 1, name );
}
macro secureFreeNS( ptr, depth, name ) @if($feature(TRACY_HAS_CALLSTACK))  
{
    free_callstack_named( ptr, depth, 1, name );
}
// end_region

// region not TRACY_HAS_CALLSTACK
macro @allocS( ptr, size, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    alloc( ptr, size );
}
macro @freeS( ptr, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    free( ptr );
}
macro @secureAllocS( ptr, size, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    secureAlloc( ptr, size );
}
macro @secureFreeS( ptr, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    secureFree( ptr );
}
macro @allocNS( ptr, size, depth, name ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    allocN( ptr, size, name );
}
macro @freeNS( ptr, depth, name ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    freeN( ptr, name );
}
macro @secureAllocNS( ptr, size, depth, name ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    secureAllocN( ptr, size, name );
}
macro @secureFreeNS( ptr, depth, name ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    secureFreeN( ptr, name );
}
// end_region

module thirdparty::tracy @if($feature(TRACY_ENABLE)); // (C)

fn void message( ZString txt, usz size, int callstack ) @extern("___tracy_emit_message");
fn void messageL( ZString txt, int callstack ) @extern("___tracy_emit_messageL");
fn void messageC( ZString txt, usz size, uint color, int callstack ) @extern("___tracy_emit_messageC");
fn void messageLC( ZString txt, uint color, int callstack ) @extern("___tracy_emit_messageLC");

// region TRACY_HAS_CALLSTACK && TRACY_CALLSTACK
macro @message( #txt, $size ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    message( #txt, $size, TRACY_CALLSTACK );
}
macro @messageL( #txt ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    messageL( #txt, TRACY_CALLSTACK );
}
macro @messageC( #txt, $size, $color ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    messageC( #txt, $size, $color, TRACY_CALLSTACK );
}
macro @messageLC( #txt, $color ) @if($feature(TRACY_HAS_CALLSTACK) &&& $feature(TRACY_CALLSTACK))
{
    messageLC( #txt, $color, TRACY_CALLSTACK );
}
// end_region

// region not TRACY_HAS_CALLSTACK && not TRACY_CALLSTACK
macro @message( #txt, $size ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    message( #txt, $size, 0 );
}
macro @messageL( #txt ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    messageL( #txt, 0 );
}
macro @messageC( #txt, $size, $color ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    messageC( #txt, $size, $color, 0 );
}
macro @messageLC( #txt, $color ) @if(!$feature(TRACY_HAS_CALLSTACK) &&& !$feature(TRACY_CALLSTACK))
{
    messageLC( #txt, $color, 0 );
}
// end_region

// region TRACY_HAS_CALLSTACK 
macro messageS( txt, size, depth ) @if($feature(TRACY_HAS_CALLSTACK)) 
{
    message( txt, size, depth );
}
macro messageLS( txt, depth ) @if($feature(TRACY_HAS_CALLSTACK)) 
{
    messageL( txt, depth );
}
macro messageCS( txt, size, color, depth ) @if($feature(TRACY_HAS_CALLSTACK)) 
{
    messageC( txt, size, color, depth );
}
macro messageLCS( txt, color, depth ) @if($feature(TRACY_HAS_CALLSTACK)) 
{
    messageLC( txt, color, depth );
}
// end_region

// region not TRACY_HAS_CALLSTACK 
macro @messageS( txt, size, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    message( txt, size );
}
macro @messageLS( txt, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    messageL( txt );
}
macro @messageCS( txt, size, color, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    messageC( txt, size, color );
}
macro @messageLCS( txt, color, depth ) @if(!$feature(TRACY_HAS_CALLSTACK))
{
    messageLC( txt, color );
}
// end_region


fn void frameMark( ZString name = "" ) @extern("___tracy_emit_frame_mark");
fn void frameMarkStart( ZString name ) @extern("___tracy_emit_frame_mark_start");
fn void frameMarkEnd( ZString name) @extern("___tracy_emit_frame_mark_end");
fn void frameImage( void* image, ushort w, ushort h, UInt8_t offset, int flip) @extern("___tracy_emit_frame_image");


fn void plot( ZString name, double val) @extern("___tracy_emit_plot");
fn void plot_float( ZString name, float val) @extern("___tracy_emit_plot_float");
fn void plot_int( ZString name, long val) @extern("___tracy_emit_plot_int");
fn void plot_config( ZString name, int type, int step, int fill, uint color) @extern("___tracy_emit_plot_config");
fn void message_appinfo( ZString txt, usz size) @extern("___tracy_emit_message_appinfo");

macro plotF( name, val ) => plot_float( name, val );
macro plotI( name, val ) => plot_int( name, val );
macro plotConfig( name, type, step, fill, color ) => plot_config( name, type, step, fill, color );
macro appInfo( txt, size ) => message_appinfo( txt, size );

fn Lockable_context_data* announce_lockable_ctx( SourceLocationData* srcloc )  @extern("___tracy_announce_lockable_ctx");
fn void Lockable_context_data.terminate( Lockable_context_data* lockdata )  @extern("___tracy_terminate_lockable_ctx");
fn int Lockable_context_data.before_lock( Lockable_context_data* lockdata )  @extern("___tracy_before_lock_lockable_ctx");
fn void Lockable_context_data.after_lock( Lockable_context_data* lockdata )  @extern("___tracy_after_lock_lockable_ctx");
fn void Lockable_context_data.after_unlock( Lockable_context_data* lockdata )  @extern("___tracy_after_unlock_lockable_ctx");
fn void Lockable_context_data.after_try_lock( Lockable_context_data* lockdata, int acquired )  @extern("___tracy_after_try_lock_lockable_ctx");
fn void Lockable_context_data.mark( Lockable_context_data* lockdata, SourceLocationData* srcloc )  @extern("___tracy_mark_lockable_ctx");
fn void Lockable_context_data.custom_name( Lockable_context_data* lockdata, ZString name, usz nameSz )  @extern("___tracy_custom_name_lockable_ctx");

macro @lockAnnounce( #lock ) 
{
    var source_location = (SourceLocationData) { "", $$FUNC,  $$FILE, (uint)$$LINE, 0 }; 
    #lock = announce_lockable_ctx( &source_location );
}
macro @lockTerminate( #lock ) 
{
    terminate_lockable_ctx( #lock );
}
macro @lockBeforeLock( #lock ) 
{
    before_lock_lockable_ctx( #lock );
}
macro @lockAfterLock( #lock ) 
{
    after_lock_lockable_ctx( #lock );
}
macro @lockAfterUnlock( #lock ) 
{
    after_unlock_lockable_ctx( #lock );
}
macro @lockAfterTryLock( #lock, #acquired ) 
{
    after_try_lock_lockable_ctx( #lock, #acquired );
}
macro @lockMark( #lock )
{
    var source_location = { "", $$FUNC,  $$FILE, (uint)$$LINE, 0 }; 
    mark_lockable_ctx( #lock, &source_location );
}
macro @lockCustomName( #lock, $name, $nameSz ) 
{
    custom_name_lockable_ctx( #lock, $name, $nameSz );
}

fn void fiber_enter( ZString fiber ) @if($feature(TRACY_FIBERS)) @extern("___tracy_fiber_enter");
fn void fiber_leave() @if($feature(TRACY_FIBERS)) @extern("___tracy_fiber_leave");
